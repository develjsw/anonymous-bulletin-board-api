generator client {
  provider = "prisma-client-js"
  output   = "../../prisma/generated/master-client"
}

datasource db {
  provider = "mysql"
  url      = env("MASTER_DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  commentId      Int        @id @default(autoincrement()) @db.UnsignedInt
  postId         Int        @db.UnsignedInt
  parentId       Int?       @db.UnsignedInt
  writer         String     @default("") @db.VarChar(50)
  content        String     @default("") @db.VarChar(200)
  createdAt      DateTime   @default(now()) @db.DateTime(0)
  posts          posts      @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_1")

  parent       comments?  @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade, onUpdate: NoAction)
  replies      comments[] @relation("CommentReplies")

  @@index([parentId], map: "parentId")
  @@index([postId], map: "postId")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model keyword_alerts {
  keywordAlertId Int    @id @default(autoincrement()) @db.UnsignedInt
  writer         String @default("") @db.VarChar(50)
  keyword        String @default("") @db.VarChar(100)

  @@unique([writer, keyword], map: "uq_writer_keyword")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model posts {
  postId    Int        @id @default(autoincrement()) @db.UnsignedInt
  title     String     @default("") @db.VarChar(100)
  content   String     @db.Text
  writer    String     @default("") @db.VarChar(50)
  password  String     @default("") @db.VarChar(255)
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime   @default(now()) @db.DateTime(0)
  comments  comments[]

  @@index([title], map: "idx_title")
  @@index([writer], map: "idx_writer")
}
